# # config a delphin2_mission pkg, having it able to generate a actionlib and actionlib_msg

# direction

-create a .action file
-> create directory ~/delphin2_mission/action/ in which contains .action file
-> copy a "GoToDepth.action" from DelphinROSv2 and place it into the directory above, or generate more .action files if required.

-things to be done in CMakeLists.txt of delphin2_mission pkg
-> include actionlib components into find_package(...) as follows:
    find_package(catkin REQUIRED COMPONENTS
      actionlib
      actionlib_msgs
      ~another_components
    )
-> uncomment add_action_files macro and add action files into it as follows:
    add_action_files(
      FILES
      GOTODepth.action 
      ~more_action.action
    )
-> include more component into generate_messages(), as follows:
     generate_messages(
       DEPENDENCIES
       actionlib_msgs   
       std_msgs
     )

-thing to be done in package.xml of delphin2_mission pkg
-> include the following dependencies:
    <build_depend>actionlib</build_depend>
    <build_depend>actionlib_msgs</build_depend>
    <run_depend>actionlib</run_depend>
    <run_depend>actionlib_msgs</run_depend>

-do catkin_make to rebuild a whold workspace

-check if everything is going ok by looking at
-> ls devel/share/learning_actionlib/msg/ (<action_name>*.msg files must appear)
-> ls devel/include/learning_actionlib/ (<action_name>*.h files must appear)


note: more detail about creating action_server.py and action_client.py can be found in links below:

-> create a fibonnacci_server.py by following link below
http://wiki.ros.org/actionlib_tutorials/Tutorials/Writing%20a%20Simple%20Action%20Server%20using%20the%20Execute%20Callback%20%28Python%29

-> create a fibonnacci_client.py by following link below
http://wiki.ros.org/actionlib_tutorials/Tutorials/Writing%20a%20Simple%20Action%20Client%20%28Python%29
